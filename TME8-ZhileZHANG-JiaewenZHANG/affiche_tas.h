/* Definition du tas */

#define TAILTAS 127	/* l'indice max et la taille de la plus grande donnee possible */
#define TAILMIN 2	/* le plus petit bloc utilisable */

extern char tas[TAILTAS+1];
extern int libre;		/* indice du premier bloc libre dans le tas */

void afficher_tas(void);
    /* affiche le contenu du tas */
    
void tas_init(void);
    /* initialise le contenu du tas quand celui-ci ne contient pas de donnees */
    
int first_fit(int taille, int *pred) {
    int current = libre;
    *pred = -1;

    while (current != -1) {
        int taille_zone = tas[current];

        if (taille_zone >= taille) {
            return current;
        }

        *pred = current;
        current = tas[current + 1];
    }

    return -1;
}

char *tas_malloc(unsigned int taille) {
    if (taille == 0 || taille > TAILLE_TAS - 1) {
        return NULL;
    }

    int pred;
    int index_zone_libre = first_fit(taille, &pred);

    if (index_zone_libre == -1) {
        return NULL;
    }

    int taille_zone_libre = tas[index_zone_libre];

    if (taille_zone_libre >= taille + 2) {
        tas[index_zone_libre] = taille;
        tas[index_zone_libre + taille + 1] = taille_zone_libre - taille - 1;
        tas[index_zone_libre + taille + 2] = tas[index_zone_libre + 1];
    } else {
        taille = taille_zone_libre;

        if (pred == -1) {
            libre = tas[index_zone_libre + 1];
        } else {
            tas[pred + 1] = tas[index_zone_libre + 1];
        }
    }

    return &tas[index_zone_libre + 1];
}